------------------------------ MODULE Receive ------------------------------

EXTENDS Sequences,
        Naturals,
        Modbus,
        TLC
        
LOCAL INSTANCE Hex
    WITH natValue <- 0, hexValue <- <<0>> 
MessagesToSerialPort == 
    {<<":","J","G","P","9","4","3","2","J","3","9","J","G","W","I","R","W">>,
     <<":","1","1","0","3","0","0","6","B","0","0","0","3","7","E","C","R","L","F">>,
     <<>>}

buffSize == 513 \*max modbus packet size

(*--fair algorithm Transmit
variables   rx = FALSE,
            rxBuf = "",
            rxReg = "",
            incMessage \in MessagesToSerialPort,
            applicationbuffer = "" \*this is what is passed to the application. Only valid modbus here plz
begin

\* wait for something to appear in the buffer
idle:   if incMessage = <<>>
            then goto alldone;
            else
                rxReg := Head(incMessage);
                incMessage := Tail(incMessage);
        end if;

start:  if rxReg /= "" /\ Len(rxBuf)
        then goto receive;
        else goto alldone;
        end if;
        
receive:    \* a ":" character indicates the start of a new message
            if rxReg = ":"
                then rxBuf := "";
            end if;
            r1: rxBuf := rxBuf \o rxReg; \* put the contents of the register into the buffer
            \*empty the register
            r2: rxReg := "";

check:      \*if we have a full modbus packet then signal
            if IsModbus(rxBuf)
            then 
                rx := TRUE; 
                applicationbuffer := rxBuf;
                goto alldone;
            else goto idle;
            end if;
            
alldone:    rxBuf := "";
            rxReg := "";

end algorithm
*)

\* BEGIN TRANSLATION
VARIABLES rx, rxBuf, rxReg, incMessage, applicationbuffer, pc

vars == << rx, rxBuf, rxReg, incMessage, applicationbuffer, pc >>

Init == (* Global variables *)
        /\ rx = FALSE
        /\ rxBuf = ""
        /\ rxReg = ""
        /\ incMessage \in MessagesToSerialPort
        /\ applicationbuffer = ""
        /\ pc = "idle"

idle == /\ pc = "idle"
        /\ IF incMessage = <<>>
              THEN /\ pc' = "alldone"
                   /\ UNCHANGED << rxReg, incMessage >>
              ELSE /\ rxReg' = Head(incMessage)
                   /\ incMessage' = Tail(incMessage)
                   /\ pc' = "start"
        /\ UNCHANGED << rx, rxBuf, applicationbuffer >>

start == /\ pc = "start"
         /\ IF rxReg /= "" /\ Len(rxBuf)
               THEN /\ pc' = "receive"
               ELSE /\ pc' = "alldone"
         /\ UNCHANGED << rx, rxBuf, rxReg, incMessage, applicationbuffer >>

receive == /\ pc = "receive"
           /\ IF rxReg = ":"
                 THEN /\ rxBuf' = ""
                 ELSE /\ TRUE
                      /\ rxBuf' = rxBuf
           /\ pc' = "r1"
           /\ UNCHANGED << rx, rxReg, incMessage, applicationbuffer >>

r1 == /\ pc = "r1"
      /\ rxBuf' = rxBuf \o rxReg
      /\ pc' = "r2"
      /\ UNCHANGED << rx, rxReg, incMessage, applicationbuffer >>

r2 == /\ pc = "r2"
      /\ rxReg' = ""
      /\ pc' = "check"
      /\ UNCHANGED << rx, rxBuf, incMessage, applicationbuffer >>

check == /\ pc = "check"
         /\ IF IsModbus(rxBuf)
               THEN /\ rx' = TRUE
                    /\ applicationbuffer' = rxBuf
                    /\ pc' = "alldone"
               ELSE /\ pc' = "idle"
                    /\ UNCHANGED << rx, applicationbuffer >>
         /\ UNCHANGED << rxBuf, rxReg, incMessage >>

alldone == /\ pc = "alldone"
           /\ rxBuf' = ""
           /\ rxReg' = ""
           /\ NoOverflow' = (Len(rxBuf') <= Len(buffSize))
           /\ pc' = "Done"
           /\ UNCHANGED << rx, incMessage, applicationbuffer >>

Next == idle \/ start \/ receive \/ r1 \/ r2 \/ check \/ alldone
           \/ (* Disjunct to prevent deadlock on termination *)
              (pc = "Done" /\ UNCHANGED vars)

Spec == /\ Init /\ [][Next]_vars
        /\ WF_vars(Next)

Termination == <>(pc = "Done")

\* END TRANSLATION

=============================================================================
\* Modification History
\* Last modified Sat May 05 15:37:24 EDT 2018 by SabraouM
\* Created Sat May 05 11:36:54 EDT 2018 by SabraouM
